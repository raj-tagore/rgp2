# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_task_constructor_msgs/GetSolutionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetSolutionRequest(genpy.Message):
  _md5sum = "004aed0f49ddbcbc97f8b44e284b1729"
  _type = "moveit_task_constructor_msgs/GetSolutionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ID of solution (as published in Task msg)
uint32 solution_id

"""
  __slots__ = ['solution_id']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solution_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSolutionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.solution_id is None:
        self.solution_id = 0
    else:
      self.solution_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.solution_id
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.solution_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.solution_id
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.solution_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_task_constructor_msgs/GetSolutionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import moveit_task_constructor_msgs.msg
import object_recognition_msgs.msg
import octomap_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg
import visualization_msgs.msg

class GetSolutionResponse(genpy.Message):
  _md5sum = "fd292a0ac91323cccdcc7ce39a609c92"
  _type = "moveit_task_constructor_msgs/GetSolutionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
Solution solution


================================================================================
MSG: moveit_task_constructor_msgs/Solution
# id of generating task
string task_id

# planning scene of start state
moveit_msgs/PlanningScene start_scene

# set of all sub solutions involved
SubSolution[] sub_solution

# (ordered) sequence of actual trajectories
SubTrajectory[] sub_trajectory

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

================================================================================
MSG: moveit_task_constructor_msgs/SubSolution
# generic solution information
SolutionInfo info

# IDs of subsolutions
uint32[] sub_solution_id

================================================================================
MSG: moveit_task_constructor_msgs/SolutionInfo
# unique id within task
uint32 id

# associated cost
float32 cost

# associated comment, usually providing failure hint
string comment

# id of stage that created this trajectory
uint32 stage_id

# markers, e.g. providing additional hints or illustrating failure
visualization_msgs/Marker[] markers

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: moveit_task_constructor_msgs/SubTrajectory
# generic solution information
SolutionInfo info

# trajectory execution information, like controller configuration
TrajectoryExecutionInfo execution_info

# trajectory
moveit_msgs/RobotTrajectory trajectory

# planning scene of end state as diff w.r.t. start state
moveit_msgs/PlanningScene scene_diff

================================================================================
MSG: moveit_task_constructor_msgs/TrajectoryExecutionInfo
# List of controllers to use when executing the trajectory
string[] controller_names

================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start
"""
  __slots__ = ['solution']
  _slot_types = ['moveit_task_constructor_msgs/Solution']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSolutionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.solution is None:
        self.solution = moveit_task_constructor_msgs.msg.Solution()
    else:
      self.solution = moveit_task_constructor_msgs.msg.Solution()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.solution.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.robot_state.joint_state.header.seq, _x.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.joint_state.header.stamp.nsecs))
      _x = self.solution.start_scene.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.start_scene.robot_state.joint_state.position))
      length = len(self.solution.start_scene.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.start_scene.robot_state.joint_state.velocity))
      length = len(self.solution.start_scene.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.start_scene.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.start_scene.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.pose
        _v11 = _v10.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = _v7.type
        _x = _v13.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v13.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v14 = val3.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val3.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v16 = val3.position
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val3.orientation
          _x = _v17
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v18 = val3.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val3.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v20 = val3.position
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v21 = val3.orientation
          _x = _v21
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v7.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v22 = val1.detach_posture
        _v23 = _v22.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v22.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v22.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v25 = val3.time_from_start
          _x = _v25
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.solution.start_scene.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.solution.start_scene.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.fixed_frame_transforms:
        _v26 = val1.header
        _x = _v26.seq
        buff.write(_get_struct_I().pack(_x))
        _v27 = _v26.stamp
        _x = _v27
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v26.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v28 = val1.transform
        _v29 = _v28.translation
        _x = _v29
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v30 = _v28.rotation
        _x = _v30
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.start_scene.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.enabled))
      length = len(self.solution.start_scene.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.start_scene.allowed_collision_matrix.default_entry_values))
      length = len(self.solution.start_scene.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v31 = val1.color
        _x = _v31
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.solution.start_scene.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.world.collision_objects:
        _v32 = val1.header
        _x = _v32.seq
        buff.write(_get_struct_I().pack(_x))
        _v33 = _v32.stamp
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v32.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v34 = val1.pose
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v37 = val1.type
        _x = _v37.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v38 = val2.position
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v39 = val2.orientation
          _x = _v39
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v40 = val2.position
          _x = _v40
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v41 = val2.orientation
          _x = _v41
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v42 = val2.position
          _x = _v42
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v43 = val2.orientation
          _x = _v43
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v44 = val2.position
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = val2.orientation
          _x = _v45
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.world.octomap.header.seq, _x.solution.start_scene.world.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.header.stamp.nsecs))
      _x = self.solution.start_scene.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.solution.start_scene.world.octomap.origin.position.x, _x.solution.start_scene.world.octomap.origin.position.y, _x.solution.start_scene.world.octomap.origin.position.z, _x.solution.start_scene.world.octomap.origin.orientation.x, _x.solution.start_scene.world.octomap.origin.orientation.y, _x.solution.start_scene.world.octomap.origin.orientation.z, _x.solution.start_scene.world.octomap.origin.orientation.w, _x.solution.start_scene.world.octomap.octomap.header.seq, _x.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.octomap.header.stamp.nsecs))
      _x = self.solution.start_scene.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.solution.start_scene.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.solution.start_scene.world.octomap.octomap.data))
      _x = self.solution.start_scene.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.solution.sub_solution)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.sub_solution:
        _v46 = val1.info
        _x = _v46
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v46.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v46.stage_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v46.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v46.markers:
          _v47 = val3.header
          _x = _v47.seq
          buff.write(_get_struct_I().pack(_x))
          _v48 = _v47.stamp
          _x = _v48
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v47.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v49 = val3.pose
          _v50 = _v49.position
          _x = _v50
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v51 = _v49.orientation
          _x = _v51
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v52 = val3.scale
          _x = _v52
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v53 = val3.color
          _x = _v53
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v54 = val3.lifetime
          _x = _v54
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
        length = len(val1.sub_solution_id)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.sub_solution_id))
      length = len(self.solution.sub_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.sub_trajectory:
        _v55 = val1.info
        _x = _v55
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v55.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v55.stage_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v55.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v55.markers:
          _v56 = val3.header
          _x = _v56.seq
          buff.write(_get_struct_I().pack(_x))
          _v57 = _v56.stamp
          _x = _v57
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v56.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v58 = val3.pose
          _v59 = _v58.position
          _x = _v59
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v60 = _v58.orientation
          _x = _v60
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v61 = val3.scale
          _x = _v61
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v62 = val3.color
          _x = _v62
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v63 = val3.lifetime
          _x = _v63
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
        _v64 = val1.execution_info
        length = len(_v64.controller_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v64.controller_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        _v65 = val1.trajectory
        _v66 = _v65.joint_trajectory
        _v67 = _v66.header
        _x = _v67.seq
        buff.write(_get_struct_I().pack(_x))
        _v68 = _v67.stamp
        _x = _v68
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v67.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v66.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v66.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v66.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v66.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val4.positions))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val4.velocities))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val4.accelerations))
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val4.effort))
          _v69 = val4.time_from_start
          _x = _v69
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v70 = _v65.multi_dof_joint_trajectory
        _v71 = _v70.header
        _x = _v71.seq
        buff.write(_get_struct_I().pack(_x))
        _v72 = _v71.stamp
        _x = _v72
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v71.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v70.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v70.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v70.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v70.points:
          length = len(val4.transforms)
          buff.write(_struct_I.pack(length))
          for val5 in val4.transforms:
            _v73 = val5.translation
            _x = _v73
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v74 = val5.rotation
            _x = _v74
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          for val5 in val4.velocities:
            _v75 = val5.linear
            _x = _v75
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v76 = val5.angular
            _x = _v76
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          for val5 in val4.accelerations:
            _v77 = val5.linear
            _x = _v77
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v78 = val5.angular
            _x = _v78
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v79 = val4.time_from_start
          _x = _v79
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v80 = val1.scene_diff
        _x = _v80.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v81 = _v80.robot_state
        _v82 = _v81.joint_state
        _v83 = _v82.header
        _x = _v83.seq
        buff.write(_get_struct_I().pack(_x))
        _v84 = _v83.stamp
        _x = _v84
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v83.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v82.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v82.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v82.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v82.position))
        length = len(_v82.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v82.velocity))
        length = len(_v82.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v82.effort))
        _v85 = _v81.multi_dof_joint_state
        _v86 = _v85.header
        _x = _v86.seq
        buff.write(_get_struct_I().pack(_x))
        _v87 = _v86.stamp
        _x = _v87
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v86.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v85.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v85.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v85.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v85.transforms:
          _v88 = val5.translation
          _x = _v88
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v89 = val5.rotation
          _x = _v89
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v85.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v85.twist:
          _v90 = val5.linear
          _x = _v90
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v91 = val5.angular
          _x = _v91
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v85.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v85.wrench:
          _v92 = val5.force
          _x = _v92
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v93 = val5.torque
          _x = _v93
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v81.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v81.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v94 = val4.object
          _v95 = _v94.header
          _x = _v95.seq
          buff.write(_get_struct_I().pack(_x))
          _v96 = _v95.stamp
          _x = _v96
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v95.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v97 = _v94.pose
          _v98 = _v97.position
          _x = _v98
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v99 = _v97.orientation
          _x = _v99
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v94.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v100 = _v94.type
          _x = _v100.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v100.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v94.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v94.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.primitive_poses:
            _v101 = val6.position
            _x = _v101
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v102 = val6.orientation
            _x = _v102
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v94.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v94.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.mesh_poses:
            _v103 = val6.position
            _x = _v103
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v104 = val6.orientation
            _x = _v104
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v94.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.planes:
            buff.write(_get_struct_4d().pack(*val6.coef))
          length = len(_v94.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.plane_poses:
            _v105 = val6.position
            _x = _v105
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v106 = val6.orientation
            _x = _v106
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v94.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v94.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v94.subframe_poses:
            _v107 = val6.position
            _x = _v107
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v108 = val6.orientation
            _x = _v108
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v94.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v109 = val4.detach_posture
          _v110 = _v109.header
          _x = _v110.seq
          buff.write(_get_struct_I().pack(_x))
          _v111 = _v110.stamp
          _x = _v111
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v110.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v109.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v109.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v109.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v109.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.positions))
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.velocities))
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.accelerations))
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.effort))
            _v112 = val6.time_from_start
            _x = _v112
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v81.is_diff
        buff.write(_get_struct_B().pack(_x))
        _x = _v80.robot_model_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v80.fixed_frame_transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v80.fixed_frame_transforms:
          _v113 = val3.header
          _x = _v113.seq
          buff.write(_get_struct_I().pack(_x))
          _v114 = _v113.stamp
          _x = _v114
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v113.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v115 = val3.transform
          _v116 = _v115.translation
          _x = _v116
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v117 = _v115.rotation
          _x = _v117
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v118 = _v80.allowed_collision_matrix
        length = len(_v118.entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v118.entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v118.entry_values)
        buff.write(_struct_I.pack(length))
        for val4 in _v118.entry_values:
          length = len(val4.enabled)
          buff.write(_struct_I.pack(length))
          pattern = '<%sB'%length
          buff.write(struct.Struct(pattern).pack(*val4.enabled))
        length = len(_v118.default_entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v118.default_entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v118.default_entry_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*_v118.default_entry_values))
        length = len(_v80.link_padding)
        buff.write(_struct_I.pack(length))
        for val3 in _v80.link_padding:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.padding
          buff.write(_get_struct_d().pack(_x))
        length = len(_v80.link_scale)
        buff.write(_struct_I.pack(length))
        for val3 in _v80.link_scale:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.scale
          buff.write(_get_struct_d().pack(_x))
        length = len(_v80.object_colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v80.object_colors:
          _x = val3.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v119 = val3.color
          _x = _v119
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v120 = _v80.world
        length = len(_v120.collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v120.collision_objects:
          _v121 = val4.header
          _x = _v121.seq
          buff.write(_get_struct_I().pack(_x))
          _v122 = _v121.stamp
          _x = _v122
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v121.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v123 = val4.pose
          _v124 = _v123.position
          _x = _v124
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v125 = _v123.orientation
          _x = _v125
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v126 = val4.type
          _x = _v126.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v126.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.primitives)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitives:
            _x = val5.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val5.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val5.dimensions))
          length = len(val4.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitive_poses:
            _v127 = val5.position
            _x = _v127
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v128 = val5.orientation
            _x = _v128
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.meshes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.meshes:
            length = len(val5.triangles)
            buff.write(_struct_I.pack(length))
            for val6 in val5.triangles:
              buff.write(_get_struct_3I().pack(*val6.vertex_indices))
            length = len(val5.vertices)
            buff.write(_struct_I.pack(length))
            for val6 in val5.vertices:
              _x = val6
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.mesh_poses:
            _v129 = val5.position
            _x = _v129
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v130 = val5.orientation
            _x = _v130
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.planes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.planes:
            buff.write(_get_struct_4d().pack(*val5.coef))
          length = len(val4.plane_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.plane_poses:
            _v131 = val5.position
            _x = _v131
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v132 = val5.orientation
            _x = _v132
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.subframe_names)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_names:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          length = len(val4.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_poses:
            _v133 = val5.position
            _x = _v133
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v134 = val5.orientation
            _x = _v134
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.operation
          buff.write(_get_struct_b().pack(_x))
        _v135 = _v120.octomap
        _v136 = _v135.header
        _x = _v136.seq
        buff.write(_get_struct_I().pack(_x))
        _v137 = _v136.stamp
        _x = _v137
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v136.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v138 = _v135.origin
        _v139 = _v138.position
        _x = _v139
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v140 = _v138.orientation
        _x = _v140
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v141 = _v135.octomap
        _v142 = _v141.header
        _x = _v142.seq
        buff.write(_get_struct_I().pack(_x))
        _v143 = _v142.stamp
        _x = _v143
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v142.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v141.binary
        buff.write(_get_struct_B().pack(_x))
        _x = _v141.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v141.resolution
        buff.write(_get_struct_d().pack(_x))
        length = len(_v141.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(struct.Struct(pattern).pack(*_v141.data))
        _x = _v80.is_diff
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.solution is None:
        self.solution = moveit_task_constructor_msgs.msg.Solution()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.robot_state.joint_state.header.seq, _x.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v144 = val1.translation
        _x = _v144
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v145 = val1.rotation
        _x = _v145
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v146 = val1.linear
        _x = _v146
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v147 = val1.angular
        _x = _v147
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v148 = val1.force
        _x = _v148
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v149 = val1.torque
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v150 = val1.object
        _v151 = _v150.header
        start = end
        end += 4
        (_v151.seq,) = _get_struct_I().unpack(str[start:end])
        _v152 = _v151.stamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.frame_id = str[start:end]
        _v153 = _v150.pose
        _v154 = _v153.position
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v155 = _v153.orientation
        _x = _v155
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v150.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v150.id = str[start:end]
        _v156 = _v150.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v156.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v156.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v156.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v156.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v150.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v157 = val3.position
          _x = _v157
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v158 = val3.orientation
          _x = _v158
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v150.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v150.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v159 = val3.position
          _x = _v159
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v160 = val3.orientation
          _x = _v160
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v150.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v150.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v161 = val3.position
          _x = _v161
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v162 = val3.orientation
          _x = _v162
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v150.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v150.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v150.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v163 = val3.position
          _x = _v163
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v164 = val3.orientation
          _x = _v164
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v150.subframe_poses.append(val3)
        start = end
        end += 1
        (_v150.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v165 = val1.detach_posture
        _v166 = _v165.header
        start = end
        end += 4
        (_v166.seq,) = _get_struct_I().unpack(str[start:end])
        _v167 = _v166.stamp
        _x = _v167
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v166.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v166.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v165.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v165.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v165.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v168 = val3.time_from_start
          _x = _v168
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v165.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.solution.start_scene.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.robot_state.is_diff = bool(self.solution.start_scene.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v169 = val1.header
        start = end
        end += 4
        (_v169.seq,) = _get_struct_I().unpack(str[start:end])
        _v170 = _v169.stamp
        _x = _v170
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v169.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v169.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v171 = val1.transform
        _v172 = _v171.translation
        _x = _v172
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v173 = _v171.rotation
        _x = _v173
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.start_scene.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = s.unpack(str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.solution.start_scene.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.allowed_collision_matrix.default_entry_values = s.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.default_entry_values = list(map(bool, self.solution.start_scene.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v174 = val1.color
        _x = _v174
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.solution.start_scene.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v175 = val1.header
        start = end
        end += 4
        (_v175.seq,) = _get_struct_I().unpack(str[start:end])
        _v176 = _v175.stamp
        _x = _v176
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v175.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v175.frame_id = str[start:end]
        _v177 = val1.pose
        _v178 = _v177.position
        _x = _v178
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v179 = _v177.orientation
        _x = _v179
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v180 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v180.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v180.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v180.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v180.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = s.unpack(str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v181 = val2.position
          _x = _v181
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v182 = val2.orientation
          _x = _v182
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v183 = val2.position
          _x = _v183
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v184 = val2.orientation
          _x = _v184
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v185 = val2.position
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v186 = val2.orientation
          _x = _v186
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v187 = val2.position
          _x = _v187
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v188 = val2.orientation
          _x = _v188
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.solution.start_scene.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.world.octomap.header.seq, _x.solution.start_scene.world.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.solution.start_scene.world.octomap.origin.position.x, _x.solution.start_scene.world.octomap.origin.position.y, _x.solution.start_scene.world.octomap.origin.position.z, _x.solution.start_scene.world.octomap.origin.orientation.x, _x.solution.start_scene.world.octomap.origin.orientation.y, _x.solution.start_scene.world.octomap.origin.orientation.z, _x.solution.start_scene.world.octomap.origin.orientation.w, _x.solution.start_scene.world.octomap.octomap.header.seq, _x.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.solution.start_scene.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.world.octomap.octomap.binary = bool(self.solution.start_scene.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.solution.start_scene.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.world.octomap.octomap.data = s.unpack(str[start:end])
      start = end
      end += 1
      (self.solution.start_scene.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.is_diff = bool(self.solution.start_scene.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.sub_solution = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubSolution()
        _v189 = val1.info
        _x = _v189
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v189.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v189.comment = str[start:end]
        start = end
        end += 4
        (_v189.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v189.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v190 = val3.header
          start = end
          end += 4
          (_v190.seq,) = _get_struct_I().unpack(str[start:end])
          _v191 = _v190.stamp
          _x = _v191
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v190.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v190.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v192 = val3.pose
          _v193 = _v192.position
          _x = _v193
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v194 = _v192.orientation
          _x = _v194
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v195 = val3.scale
          _x = _v195
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v196 = val3.color
          _x = _v196
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v197 = val3.lifetime
          _x = _v197
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v189.markers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sub_solution_id = s.unpack(str[start:end])
        self.solution.sub_solution.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.sub_trajectory = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubTrajectory()
        _v198 = val1.info
        _x = _v198
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v198.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v198.comment = str[start:end]
        start = end
        end += 4
        (_v198.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v198.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v199 = val3.header
          start = end
          end += 4
          (_v199.seq,) = _get_struct_I().unpack(str[start:end])
          _v200 = _v199.stamp
          _x = _v200
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v199.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v199.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v201 = val3.pose
          _v202 = _v201.position
          _x = _v202
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v203 = _v201.orientation
          _x = _v203
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v204 = val3.scale
          _x = _v204
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v205 = val3.color
          _x = _v205
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v206 = val3.lifetime
          _x = _v206
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v198.markers.append(val3)
        _v207 = val1.execution_info
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v207.controller_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v207.controller_names.append(val3)
        _v208 = val1.trajectory
        _v209 = _v208.joint_trajectory
        _v210 = _v209.header
        start = end
        end += 4
        (_v210.seq,) = _get_struct_I().unpack(str[start:end])
        _v211 = _v210.stamp
        _x = _v211
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v210.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v210.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v209.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v209.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.effort = s.unpack(str[start:end])
          _v212 = val4.time_from_start
          _x = _v212
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v209.points.append(val4)
        _v213 = _v208.multi_dof_joint_trajectory
        _v214 = _v213.header
        start = end
        end += 4
        (_v214.seq,) = _get_struct_I().unpack(str[start:end])
        _v215 = _v214.stamp
        _x = _v215
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v214.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v214.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v213.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v213.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v213.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.transforms = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Transform()
            _v216 = val5.translation
            _x = _v216
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v217 = val5.rotation
            _x = _v217
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.transforms.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.velocities = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v218 = val5.linear
            _x = _v218
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v219 = val5.angular
            _x = _v219
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.velocities.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.accelerations = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v220 = val5.linear
            _x = _v220
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v221 = val5.angular
            _x = _v221
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.accelerations.append(val5)
          _v222 = val4.time_from_start
          _x = _v222
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v213.points.append(val4)
        _v223 = val1.scene_diff
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v223.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v223.name = str[start:end]
        _v224 = _v223.robot_state
        _v225 = _v224.joint_state
        _v226 = _v225.header
        start = end
        end += 4
        (_v226.seq,) = _get_struct_I().unpack(str[start:end])
        _v227 = _v226.stamp
        _x = _v227
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v226.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v226.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v225.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v225.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v225.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v225.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v225.effort = s.unpack(str[start:end])
        _v228 = _v224.multi_dof_joint_state
        _v229 = _v228.header
        start = end
        end += 4
        (_v229.seq,) = _get_struct_I().unpack(str[start:end])
        _v230 = _v229.stamp
        _x = _v230
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v229.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v229.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v228.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v228.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v228.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v231 = val5.translation
          _x = _v231
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v232 = val5.rotation
          _x = _v232
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v228.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v228.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v233 = val5.linear
          _x = _v233
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v234 = val5.angular
          _x = _v234
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v228.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v228.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v235 = val5.force
          _x = _v235
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v236 = val5.torque
          _x = _v236
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v228.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v224.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v237 = val4.object
          _v238 = _v237.header
          start = end
          end += 4
          (_v238.seq,) = _get_struct_I().unpack(str[start:end])
          _v239 = _v238.stamp
          _x = _v239
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v238.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v238.frame_id = str[start:end]
          _v240 = _v237.pose
          _v241 = _v240.position
          _x = _v241
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v242 = _v240.orientation
          _x = _v242
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v237.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v237.id = str[start:end]
          _v243 = _v237.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v243.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v243.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v237.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v244 = val6.position
            _x = _v244
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v245 = val6.orientation
            _x = _v245
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v237.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v237.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v246 = val6.position
            _x = _v246
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v247 = val6.orientation
            _x = _v247
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v237.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = _get_struct_4d().unpack(str[start:end])
            _v237.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v248 = val6.position
            _x = _v248
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v249 = val6.orientation
            _x = _v249
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v237.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v237.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v237.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v250 = val6.position
            _x = _v250
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v251 = val6.orientation
            _x = _v251
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v237.subframe_poses.append(val6)
          start = end
          end += 1
          (_v237.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v252 = val4.detach_posture
          _v253 = _v252.header
          start = end
          end += 4
          (_v253.seq,) = _get_struct_I().unpack(str[start:end])
          _v254 = _v253.stamp
          _x = _v254
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v253.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v253.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v252.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v252.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v252.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = s.unpack(str[start:end])
            _v255 = val6.time_from_start
            _x = _v255
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v252.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v224.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v224.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v224.is_diff = bool(_v224.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v223.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v223.robot_model_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v223.fixed_frame_transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.TransformStamped()
          _v256 = val3.header
          start = end
          end += 4
          (_v256.seq,) = _get_struct_I().unpack(str[start:end])
          _v257 = _v256.stamp
          _x = _v257
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v256.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v256.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.child_frame_id = str[start:end]
          _v258 = val3.transform
          _v259 = _v258.translation
          _x = _v259
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v260 = _v258.rotation
          _x = _v260
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v223.fixed_frame_transforms.append(val3)
        _v261 = _v223.allowed_collision_matrix
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v261.entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v261.entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v261.entry_values = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AllowedCollisionEntry()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sB'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.enabled = s.unpack(str[start:end])
          val4.enabled = list(map(bool, val4.enabled))
          _v261.entry_values.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v261.default_entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v261.default_entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v261.default_entry_values = s.unpack(str[start:end])
        _v261.default_entry_values = list(map(bool, _v261.default_entry_values))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v223.link_padding = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkPadding()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.padding,) = _get_struct_d().unpack(str[start:end])
          _v223.link_padding.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v223.link_scale = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkScale()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.scale,) = _get_struct_d().unpack(str[start:end])
          _v223.link_scale.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v223.object_colors = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.ObjectColor()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.id = str[start:end]
          _v262 = val3.color
          _x = _v262
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v223.object_colors.append(val3)
        _v263 = _v223.world
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v263.collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.CollisionObject()
          _v264 = val4.header
          start = end
          end += 4
          (_v264.seq,) = _get_struct_I().unpack(str[start:end])
          _v265 = _v264.stamp
          _x = _v265
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v264.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v264.frame_id = str[start:end]
          _v266 = val4.pose
          _v267 = _v266.position
          _x = _v267
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v268 = _v266.orientation
          _x = _v268
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.id = str[start:end]
          _v269 = val4.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v269.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v269.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v269.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v269.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitives = []
          for i in range(0, length):
            val5 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val5.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val5.dimensions = s.unpack(str[start:end])
            val4.primitives.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitive_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v270 = val5.position
            _x = _v270
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v271 = val5.orientation
            _x = _v271
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.primitive_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.meshes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.triangles = []
            for i in range(0, length):
              val6 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val6.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val5.triangles.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.vertices = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Point()
              _x = val6
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val5.vertices.append(val6)
            val4.meshes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.mesh_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v272 = val5.position
            _x = _v272
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v273 = val5.orientation
            _x = _v273
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.mesh_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.planes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val5.coef = _get_struct_4d().unpack(str[start:end])
            val4.planes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.plane_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v274 = val5.position
            _x = _v274
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v275 = val5.orientation
            _x = _v275
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.plane_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.subframe_names.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v276 = val5.position
            _x = _v276
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v277 = val5.orientation
            _x = _v277
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.subframe_poses.append(val5)
          start = end
          end += 1
          (val4.operation,) = _get_struct_b().unpack(str[start:end])
          _v263.collision_objects.append(val4)
        _v278 = _v263.octomap
        _v279 = _v278.header
        start = end
        end += 4
        (_v279.seq,) = _get_struct_I().unpack(str[start:end])
        _v280 = _v279.stamp
        _x = _v280
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v279.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v279.frame_id = str[start:end]
        _v281 = _v278.origin
        _v282 = _v281.position
        _x = _v282
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v283 = _v281.orientation
        _x = _v283
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v284 = _v278.octomap
        _v285 = _v284.header
        start = end
        end += 4
        (_v285.seq,) = _get_struct_I().unpack(str[start:end])
        _v286 = _v285.stamp
        _x = _v286
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v285.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v285.frame_id = str[start:end]
        start = end
        end += 1
        (_v284.binary,) = _get_struct_B().unpack(str[start:end])
        _v284.binary = bool(_v284.binary)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v284.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v284.id = str[start:end]
        start = end
        end += 8
        (_v284.resolution,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v284.data = s.unpack(str[start:end])
        start = end
        end += 1
        (_v223.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v223.is_diff = bool(_v223.is_diff)
        self.solution.sub_trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.solution.task_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.robot_state.joint_state.header.seq, _x.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.joint_state.header.stamp.nsecs))
      _x = self.solution.start_scene.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.start_scene.robot_state.joint_state.position.tostring())
      length = len(self.solution.start_scene.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.start_scene.robot_state.joint_state.velocity.tostring())
      length = len(self.solution.start_scene.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.start_scene.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.transforms:
        _v287 = val1.translation
        _x = _v287
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v288 = val1.rotation
        _x = _v288
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.twist:
        _v289 = val1.linear
        _x = _v289
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v290 = val1.angular
        _x = _v290
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.start_scene.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.multi_dof_joint_state.wrench:
        _v291 = val1.force
        _x = _v291
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v292 = val1.torque
        _x = _v292
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.solution.start_scene.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v293 = val1.object
        _v294 = _v293.header
        _x = _v294.seq
        buff.write(_get_struct_I().pack(_x))
        _v295 = _v294.stamp
        _x = _v295
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v294.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v296 = _v293.pose
        _v297 = _v296.position
        _x = _v297
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v298 = _v296.orientation
        _x = _v298
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v293.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v299 = _v293.type
        _x = _v299.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v299.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v293.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v293.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.primitive_poses:
          _v300 = val3.position
          _x = _v300
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v301 = val3.orientation
          _x = _v301
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v293.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v293.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.mesh_poses:
          _v302 = val3.position
          _x = _v302
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v303 = val3.orientation
          _x = _v303
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v293.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.planes:
          buff.write(val3.coef.tostring())
        length = len(_v293.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.plane_poses:
          _v304 = val3.position
          _x = _v304
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v305 = val3.orientation
          _x = _v305
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v293.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v293.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v293.subframe_poses:
          _v306 = val3.position
          _x = _v306
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v307 = val3.orientation
          _x = _v307
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v293.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v308 = val1.detach_posture
        _v309 = _v308.header
        _x = _v309.seq
        buff.write(_get_struct_I().pack(_x))
        _v310 = _v309.stamp
        _x = _v310
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v309.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v308.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v308.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v308.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v308.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v311 = val3.time_from_start
          _x = _v311
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.solution.start_scene.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.solution.start_scene.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.solution.start_scene.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.fixed_frame_transforms:
        _v312 = val1.header
        _x = _v312.seq
        buff.write(_get_struct_I().pack(_x))
        _v313 = _v312.stamp
        _x = _v313
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v312.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v314 = val1.transform
        _v315 = _v314.translation
        _x = _v315
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v316 = _v314.rotation
        _x = _v316
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.solution.start_scene.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.solution.start_scene.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.solution.start_scene.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.solution.start_scene.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.solution.start_scene.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v317 = val1.color
        _x = _v317
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.solution.start_scene.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.start_scene.world.collision_objects:
        _v318 = val1.header
        _x = _v318.seq
        buff.write(_get_struct_I().pack(_x))
        _v319 = _v318.stamp
        _x = _v319
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v318.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v320 = val1.pose
        _v321 = _v320.position
        _x = _v321
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v322 = _v320.orientation
        _x = _v322
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v323 = val1.type
        _x = _v323.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v323.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v324 = val2.position
          _x = _v324
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v325 = val2.orientation
          _x = _v325
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v326 = val2.position
          _x = _v326
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v327 = val2.orientation
          _x = _v327
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v328 = val2.position
          _x = _v328
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v329 = val2.orientation
          _x = _v329
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v330 = val2.position
          _x = _v330
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v331 = val2.orientation
          _x = _v331
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.solution.start_scene.world.octomap.header.seq, _x.solution.start_scene.world.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.header.stamp.nsecs))
      _x = self.solution.start_scene.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.solution.start_scene.world.octomap.origin.position.x, _x.solution.start_scene.world.octomap.origin.position.y, _x.solution.start_scene.world.octomap.origin.position.z, _x.solution.start_scene.world.octomap.origin.orientation.x, _x.solution.start_scene.world.octomap.origin.orientation.y, _x.solution.start_scene.world.octomap.origin.orientation.z, _x.solution.start_scene.world.octomap.origin.orientation.w, _x.solution.start_scene.world.octomap.octomap.header.seq, _x.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.octomap.header.stamp.nsecs))
      _x = self.solution.start_scene.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.solution.start_scene.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.solution.start_scene.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.solution.start_scene.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.solution.start_scene.world.octomap.octomap.data.tostring())
      _x = self.solution.start_scene.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.solution.sub_solution)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.sub_solution:
        _v332 = val1.info
        _x = _v332
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v332.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v332.stage_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v332.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v332.markers:
          _v333 = val3.header
          _x = _v333.seq
          buff.write(_get_struct_I().pack(_x))
          _v334 = _v333.stamp
          _x = _v334
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v333.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v335 = val3.pose
          _v336 = _v335.position
          _x = _v336
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v337 = _v335.orientation
          _x = _v337
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v338 = val3.scale
          _x = _v338
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v339 = val3.color
          _x = _v339
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v340 = val3.lifetime
          _x = _v340
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
        length = len(val1.sub_solution_id)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.sub_solution_id.tostring())
      length = len(self.solution.sub_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.sub_trajectory:
        _v341 = val1.info
        _x = _v341
        buff.write(_get_struct_If().pack(_x.id, _x.cost))
        _x = _v341.comment
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v341.stage_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v341.markers)
        buff.write(_struct_I.pack(length))
        for val3 in _v341.markers:
          _v342 = val3.header
          _x = _v342.seq
          buff.write(_get_struct_I().pack(_x))
          _v343 = _v342.stamp
          _x = _v343
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v342.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.ns
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
          _v344 = val3.pose
          _v345 = _v344.position
          _x = _v345
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v346 = _v344.orientation
          _x = _v346
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v347 = val3.scale
          _x = _v347
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v348 = val3.color
          _x = _v348
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _v349 = val3.lifetime
          _x = _v349
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val3.frame_locked
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.points)
          buff.write(_struct_I.pack(length))
          for val4 in val3.points:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.colors)
          buff.write(_struct_I.pack(length))
          for val4 in val3.colors:
            _x = val4
            buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
          _x = val3.text
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_resource
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.mesh_use_embedded_materials
          buff.write(_get_struct_B().pack(_x))
        _v350 = val1.execution_info
        length = len(_v350.controller_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v350.controller_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        _v351 = val1.trajectory
        _v352 = _v351.joint_trajectory
        _v353 = _v352.header
        _x = _v353.seq
        buff.write(_get_struct_I().pack(_x))
        _v354 = _v353.stamp
        _x = _v354
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v353.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v352.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v352.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v352.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v352.points:
          length = len(val4.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.positions.tostring())
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.velocities.tostring())
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.accelerations.tostring())
          length = len(val4.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val4.effort.tostring())
          _v355 = val4.time_from_start
          _x = _v355
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v356 = _v351.multi_dof_joint_trajectory
        _v357 = _v356.header
        _x = _v357.seq
        buff.write(_get_struct_I().pack(_x))
        _v358 = _v357.stamp
        _x = _v358
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v357.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v356.joint_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v356.joint_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v356.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v356.points:
          length = len(val4.transforms)
          buff.write(_struct_I.pack(length))
          for val5 in val4.transforms:
            _v359 = val5.translation
            _x = _v359
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v360 = val5.rotation
            _x = _v360
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.velocities)
          buff.write(_struct_I.pack(length))
          for val5 in val4.velocities:
            _v361 = val5.linear
            _x = _v361
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v362 = val5.angular
            _x = _v362
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.accelerations)
          buff.write(_struct_I.pack(length))
          for val5 in val4.accelerations:
            _v363 = val5.linear
            _x = _v363
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v364 = val5.angular
            _x = _v364
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v365 = val4.time_from_start
          _x = _v365
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v366 = val1.scene_diff
        _x = _v366.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v367 = _v366.robot_state
        _v368 = _v367.joint_state
        _v369 = _v368.header
        _x = _v369.seq
        buff.write(_get_struct_I().pack(_x))
        _v370 = _v369.stamp
        _x = _v370
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v369.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v368.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v368.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v368.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v368.position.tostring())
        length = len(_v368.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v368.velocity.tostring())
        length = len(_v368.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v368.effort.tostring())
        _v371 = _v367.multi_dof_joint_state
        _v372 = _v371.header
        _x = _v372.seq
        buff.write(_get_struct_I().pack(_x))
        _v373 = _v372.stamp
        _x = _v373
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v372.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v371.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v371.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v371.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v371.transforms:
          _v374 = val5.translation
          _x = _v374
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v375 = val5.rotation
          _x = _v375
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v371.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v371.twist:
          _v376 = val5.linear
          _x = _v376
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v377 = val5.angular
          _x = _v377
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v371.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v371.wrench:
          _v378 = val5.force
          _x = _v378
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v379 = val5.torque
          _x = _v379
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v367.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v367.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v380 = val4.object
          _v381 = _v380.header
          _x = _v381.seq
          buff.write(_get_struct_I().pack(_x))
          _v382 = _v381.stamp
          _x = _v382
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v381.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v383 = _v380.pose
          _v384 = _v383.position
          _x = _v384
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v385 = _v383.orientation
          _x = _v385
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v380.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v386 = _v380.type
          _x = _v386.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v386.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v380.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v380.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.primitive_poses:
            _v387 = val6.position
            _x = _v387
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v388 = val6.orientation
            _x = _v388
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v380.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v380.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.mesh_poses:
            _v389 = val6.position
            _x = _v389
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v390 = val6.orientation
            _x = _v390
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v380.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.planes:
            buff.write(val6.coef.tostring())
          length = len(_v380.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.plane_poses:
            _v391 = val6.position
            _x = _v391
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v392 = val6.orientation
            _x = _v392
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v380.subframe_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.subframe_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v380.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v380.subframe_poses:
            _v393 = val6.position
            _x = _v393
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v394 = val6.orientation
            _x = _v394
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v380.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v395 = val4.detach_posture
          _v396 = _v395.header
          _x = _v396.seq
          buff.write(_get_struct_I().pack(_x))
          _v397 = _v396.stamp
          _x = _v397
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v396.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v395.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v395.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v395.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v395.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.positions.tostring())
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.velocities.tostring())
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.accelerations.tostring())
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.effort.tostring())
            _v398 = val6.time_from_start
            _x = _v398
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v367.is_diff
        buff.write(_get_struct_B().pack(_x))
        _x = _v366.robot_model_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v366.fixed_frame_transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.fixed_frame_transforms:
          _v399 = val3.header
          _x = _v399.seq
          buff.write(_get_struct_I().pack(_x))
          _v400 = _v399.stamp
          _x = _v400
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v399.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v401 = val3.transform
          _v402 = _v401.translation
          _x = _v402
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v403 = _v401.rotation
          _x = _v403
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v404 = _v366.allowed_collision_matrix
        length = len(_v404.entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v404.entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v404.entry_values)
        buff.write(_struct_I.pack(length))
        for val4 in _v404.entry_values:
          length = len(val4.enabled)
          buff.write(_struct_I.pack(length))
          pattern = '<%sB'%length
          buff.write(val4.enabled.tostring())
        length = len(_v404.default_entry_names)
        buff.write(_struct_I.pack(length))
        for val4 in _v404.default_entry_names:
          length = len(val4)
          if python3 or type(val4) == unicode:
            val4 = val4.encode('utf-8')
            length = len(val4)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
        length = len(_v404.default_entry_values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v404.default_entry_values.tostring())
        length = len(_v366.link_padding)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.link_padding:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.padding
          buff.write(_get_struct_d().pack(_x))
        length = len(_v366.link_scale)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.link_scale:
          _x = val3.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.scale
          buff.write(_get_struct_d().pack(_x))
        length = len(_v366.object_colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v366.object_colors:
          _x = val3.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v405 = val3.color
          _x = _v405
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v406 = _v366.world
        length = len(_v406.collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v406.collision_objects:
          _v407 = val4.header
          _x = _v407.seq
          buff.write(_get_struct_I().pack(_x))
          _v408 = _v407.stamp
          _x = _v408
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v407.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v409 = val4.pose
          _v410 = _v409.position
          _x = _v410
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v411 = _v409.orientation
          _x = _v411
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v412 = val4.type
          _x = _v412.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v412.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.primitives)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitives:
            _x = val5.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val5.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val5.dimensions.tostring())
          length = len(val4.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.primitive_poses:
            _v413 = val5.position
            _x = _v413
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v414 = val5.orientation
            _x = _v414
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.meshes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.meshes:
            length = len(val5.triangles)
            buff.write(_struct_I.pack(length))
            for val6 in val5.triangles:
              buff.write(val6.vertex_indices.tostring())
            length = len(val5.vertices)
            buff.write(_struct_I.pack(length))
            for val6 in val5.vertices:
              _x = val6
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val4.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.mesh_poses:
            _v415 = val5.position
            _x = _v415
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v416 = val5.orientation
            _x = _v416
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.planes)
          buff.write(_struct_I.pack(length))
          for val5 in val4.planes:
            buff.write(val5.coef.tostring())
          length = len(val4.plane_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.plane_poses:
            _v417 = val5.position
            _x = _v417
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v418 = val5.orientation
            _x = _v418
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val4.subframe_names)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_names:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          length = len(val4.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val5 in val4.subframe_poses:
            _v419 = val5.position
            _x = _v419
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v420 = val5.orientation
            _x = _v420
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.operation
          buff.write(_get_struct_b().pack(_x))
        _v421 = _v406.octomap
        _v422 = _v421.header
        _x = _v422.seq
        buff.write(_get_struct_I().pack(_x))
        _v423 = _v422.stamp
        _x = _v423
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v422.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v424 = _v421.origin
        _v425 = _v424.position
        _x = _v425
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v426 = _v424.orientation
        _x = _v426
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v427 = _v421.octomap
        _v428 = _v427.header
        _x = _v428.seq
        buff.write(_get_struct_I().pack(_x))
        _v429 = _v428.stamp
        _x = _v429
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v428.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v427.binary
        buff.write(_get_struct_B().pack(_x))
        _x = _v427.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v427.resolution
        buff.write(_get_struct_d().pack(_x))
        length = len(_v427.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(_v427.data.tostring())
        _x = _v366.is_diff
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.solution is None:
        self.solution = moveit_task_constructor_msgs.msg.Solution()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.task_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.task_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.robot_state.joint_state.header.seq, _x.solution.start_scene.robot_state.joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.robot_state.multi_dof_joint_state.header.seq, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.secs, _x.solution.start_scene.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v430 = val1.translation
        _x = _v430
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v431 = val1.rotation
        _x = _v431
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v432 = val1.linear
        _x = _v432
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v433 = val1.angular
        _x = _v433
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v434 = val1.force
        _x = _v434
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v435 = val1.torque
        _x = _v435
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.solution.start_scene.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v436 = val1.object
        _v437 = _v436.header
        start = end
        end += 4
        (_v437.seq,) = _get_struct_I().unpack(str[start:end])
        _v438 = _v437.stamp
        _x = _v438
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v437.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v437.frame_id = str[start:end]
        _v439 = _v436.pose
        _v440 = _v439.position
        _x = _v440
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v441 = _v439.orientation
        _x = _v441
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v436.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v436.id = str[start:end]
        _v442 = _v436.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v442.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v442.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v442.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v442.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v436.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v443 = val3.position
          _x = _v443
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v444 = val3.orientation
          _x = _v444
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v436.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v436.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v445 = val3.position
          _x = _v445
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v446 = val3.orientation
          _x = _v446
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v436.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v436.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v447 = val3.position
          _x = _v447
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v448 = val3.orientation
          _x = _v448
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v436.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v436.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v436.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v449 = val3.position
          _x = _v449
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v450 = val3.orientation
          _x = _v450
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v436.subframe_poses.append(val3)
        start = end
        end += 1
        (_v436.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v451 = val1.detach_posture
        _v452 = _v451.header
        start = end
        end += 4
        (_v452.seq,) = _get_struct_I().unpack(str[start:end])
        _v453 = _v452.stamp
        _x = _v453
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v452.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v452.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v451.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v454 = val3.time_from_start
          _x = _v454
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v451.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.solution.start_scene.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.robot_state.is_diff = bool(self.solution.start_scene.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v455 = val1.header
        start = end
        end += 4
        (_v455.seq,) = _get_struct_I().unpack(str[start:end])
        _v456 = _v455.stamp
        _x = _v456
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v455.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v455.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v457 = val1.transform
        _v458 = _v457.translation
        _x = _v458
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v459 = _v457.rotation
        _x = _v459
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.solution.start_scene.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.solution.start_scene.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.solution.start_scene.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.solution.start_scene.allowed_collision_matrix.default_entry_values = list(map(bool, self.solution.start_scene.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.solution.start_scene.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v460 = val1.color
        _x = _v460
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.solution.start_scene.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.start_scene.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v461 = val1.header
        start = end
        end += 4
        (_v461.seq,) = _get_struct_I().unpack(str[start:end])
        _v462 = _v461.stamp
        _x = _v462
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v461.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v461.frame_id = str[start:end]
        _v463 = val1.pose
        _v464 = _v463.position
        _x = _v464
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v465 = _v463.orientation
        _x = _v465
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v466 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v466.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v466.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v466.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v466.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v467 = val2.position
          _x = _v467
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v468 = val2.orientation
          _x = _v468
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v469 = val2.position
          _x = _v469
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v470 = val2.orientation
          _x = _v470
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v471 = val2.position
          _x = _v471
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v472 = val2.orientation
          _x = _v472
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v473 = val2.position
          _x = _v473
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v474 = val2.orientation
          _x = _v474
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.solution.start_scene.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.solution.start_scene.world.octomap.header.seq, _x.solution.start_scene.world.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.solution.start_scene.world.octomap.origin.position.x, _x.solution.start_scene.world.octomap.origin.position.y, _x.solution.start_scene.world.octomap.origin.position.z, _x.solution.start_scene.world.octomap.origin.orientation.x, _x.solution.start_scene.world.octomap.origin.orientation.y, _x.solution.start_scene.world.octomap.origin.orientation.z, _x.solution.start_scene.world.octomap.origin.orientation.w, _x.solution.start_scene.world.octomap.octomap.header.seq, _x.solution.start_scene.world.octomap.octomap.header.stamp.secs, _x.solution.start_scene.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.solution.start_scene.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.world.octomap.octomap.binary = bool(self.solution.start_scene.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.start_scene.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution.start_scene.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.solution.start_scene.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution.start_scene.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 1
      (self.solution.start_scene.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.solution.start_scene.is_diff = bool(self.solution.start_scene.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.sub_solution = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubSolution()
        _v475 = val1.info
        _x = _v475
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v475.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v475.comment = str[start:end]
        start = end
        end += 4
        (_v475.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v475.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v476 = val3.header
          start = end
          end += 4
          (_v476.seq,) = _get_struct_I().unpack(str[start:end])
          _v477 = _v476.stamp
          _x = _v477
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v476.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v476.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v478 = val3.pose
          _v479 = _v478.position
          _x = _v479
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v480 = _v478.orientation
          _x = _v480
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v481 = val3.scale
          _x = _v481
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v482 = val3.color
          _x = _v482
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v483 = val3.lifetime
          _x = _v483
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v475.markers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sub_solution_id = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.solution.sub_solution.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.sub_trajectory = []
      for i in range(0, length):
        val1 = moveit_task_constructor_msgs.msg.SubTrajectory()
        _v484 = val1.info
        _x = _v484
        start = end
        end += 8
        (_x.id, _x.cost,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v484.comment = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v484.comment = str[start:end]
        start = end
        end += 4
        (_v484.stage_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v484.markers = []
        for i in range(0, length):
          val3 = visualization_msgs.msg.Marker()
          _v485 = val3.header
          start = end
          end += 4
          (_v485.seq,) = _get_struct_I().unpack(str[start:end])
          _v486 = _v485.stamp
          _x = _v486
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v485.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v485.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.ns = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.ns = str[start:end]
          _x = val3
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
          _v487 = val3.pose
          _v488 = _v487.position
          _x = _v488
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v489 = _v487.orientation
          _x = _v489
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v490 = val3.scale
          _x = _v490
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v491 = val3.color
          _x = _v491
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v492 = val3.lifetime
          _x = _v492
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val3.frame_locked,) = _get_struct_B().unpack(str[start:end])
          val3.frame_locked = bool(val3.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.colors = []
          for i in range(0, length):
            val4 = std_msgs.msg.ColorRGBA()
            _x = val4
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
            val3.colors.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.text = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.mesh_resource = str[start:end]
          start = end
          end += 1
          (val3.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
          val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
          _v484.markers.append(val3)
        _v493 = val1.execution_info
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.controller_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v493.controller_names.append(val3)
        _v494 = val1.trajectory
        _v495 = _v494.joint_trajectory
        _v496 = _v495.header
        start = end
        end += 4
        (_v496.seq,) = _get_struct_I().unpack(str[start:end])
        _v497 = _v496.stamp
        _x = _v497
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v496.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v496.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v495.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v495.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v495.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v498 = val4.time_from_start
          _x = _v498
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v495.points.append(val4)
        _v499 = _v494.multi_dof_joint_trajectory
        _v500 = _v499.header
        start = end
        end += 4
        (_v500.seq,) = _get_struct_I().unpack(str[start:end])
        _v501 = _v500.stamp
        _x = _v501
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v500.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v500.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v499.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v499.joint_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v499.points = []
        for i in range(0, length):
          val4 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.transforms = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Transform()
            _v502 = val5.translation
            _x = _v502
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v503 = val5.rotation
            _x = _v503
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.transforms.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.velocities = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v504 = val5.linear
            _x = _v504
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v505 = val5.angular
            _x = _v505
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.velocities.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.accelerations = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Twist()
            _v506 = val5.linear
            _x = _v506
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v507 = val5.angular
            _x = _v507
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val4.accelerations.append(val5)
          _v508 = val4.time_from_start
          _x = _v508
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v499.points.append(val4)
        _v509 = val1.scene_diff
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v509.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v509.name = str[start:end]
        _v510 = _v509.robot_state
        _v511 = _v510.joint_state
        _v512 = _v511.header
        start = end
        end += 4
        (_v512.seq,) = _get_struct_I().unpack(str[start:end])
        _v513 = _v512.stamp
        _x = _v513
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v512.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v512.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v511.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v511.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v511.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v511.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v511.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v514 = _v510.multi_dof_joint_state
        _v515 = _v514.header
        start = end
        end += 4
        (_v515.seq,) = _get_struct_I().unpack(str[start:end])
        _v516 = _v515.stamp
        _x = _v516
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v515.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v515.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v514.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v514.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v514.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v517 = val5.translation
          _x = _v517
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v518 = val5.rotation
          _x = _v518
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v514.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v514.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v519 = val5.linear
          _x = _v519
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v520 = val5.angular
          _x = _v520
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v514.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v514.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v521 = val5.force
          _x = _v521
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v522 = val5.torque
          _x = _v522
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v514.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v510.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v523 = val4.object
          _v524 = _v523.header
          start = end
          end += 4
          (_v524.seq,) = _get_struct_I().unpack(str[start:end])
          _v525 = _v524.stamp
          _x = _v525
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v524.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v524.frame_id = str[start:end]
          _v526 = _v523.pose
          _v527 = _v526.position
          _x = _v527
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v528 = _v526.orientation
          _x = _v528
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v523.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v523.id = str[start:end]
          _v529 = _v523.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v529.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v529.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v529.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v529.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v523.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v530 = val6.position
            _x = _v530
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v531 = val6.orientation
            _x = _v531
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v523.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v523.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v532 = val6.position
            _x = _v532
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v533 = val6.orientation
            _x = _v533
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v523.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v523.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v534 = val6.position
            _x = _v534
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v535 = val6.orientation
            _x = _v535
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v523.plane_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v523.subframe_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v523.subframe_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v536 = val6.position
            _x = _v536
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v537 = val6.orientation
            _x = _v537
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v523.subframe_poses.append(val6)
          start = end
          end += 1
          (_v523.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v538 = val4.detach_posture
          _v539 = _v538.header
          start = end
          end += 4
          (_v539.seq,) = _get_struct_I().unpack(str[start:end])
          _v540 = _v539.stamp
          _x = _v540
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v539.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v539.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v538.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v538.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v538.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v541 = val6.time_from_start
            _x = _v541
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v538.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v510.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v510.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v510.is_diff = bool(_v510.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v509.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v509.robot_model_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.fixed_frame_transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.TransformStamped()
          _v542 = val3.header
          start = end
          end += 4
          (_v542.seq,) = _get_struct_I().unpack(str[start:end])
          _v543 = _v542.stamp
          _x = _v543
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v542.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v542.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.child_frame_id = str[start:end]
          _v544 = val3.transform
          _v545 = _v544.translation
          _x = _v545
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v546 = _v544.rotation
          _x = _v546
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v509.fixed_frame_transforms.append(val3)
        _v547 = _v509.allowed_collision_matrix
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v547.entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v547.entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v547.entry_values = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AllowedCollisionEntry()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sB'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val4.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
          val4.enabled = list(map(bool, val4.enabled))
          _v547.entry_values.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v547.default_entry_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4 = str[start:end]
          _v547.default_entry_names.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v547.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v547.default_entry_values = list(map(bool, _v547.default_entry_values))
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.link_padding = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkPadding()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.padding,) = _get_struct_d().unpack(str[start:end])
          _v509.link_padding.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.link_scale = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.LinkScale()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.link_name = str[start:end]
          start = end
          end += 8
          (val3.scale,) = _get_struct_d().unpack(str[start:end])
          _v509.link_scale.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.object_colors = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.ObjectColor()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.id = str[start:end]
          _v548 = val3.color
          _x = _v548
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v509.object_colors.append(val3)
        _v549 = _v509.world
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v549.collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.CollisionObject()
          _v550 = val4.header
          start = end
          end += 4
          (_v550.seq,) = _get_struct_I().unpack(str[start:end])
          _v551 = _v550.stamp
          _x = _v551
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v550.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v550.frame_id = str[start:end]
          _v552 = val4.pose
          _v553 = _v552.position
          _x = _v553
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v554 = _v552.orientation
          _x = _v554
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.id = str[start:end]
          _v555 = val4.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v555.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v555.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v555.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v555.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitives = []
          for i in range(0, length):
            val5 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val5.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val5.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            val4.primitives.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.primitive_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v556 = val5.position
            _x = _v556
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v557 = val5.orientation
            _x = _v557
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.primitive_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.meshes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.triangles = []
            for i in range(0, length):
              val6 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val6.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val5.triangles.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val5.vertices = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Point()
              _x = val6
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val5.vertices.append(val6)
            val4.meshes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.mesh_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v558 = val5.position
            _x = _v558
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v559 = val5.orientation
            _x = _v559
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.mesh_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.planes = []
          for i in range(0, length):
            val5 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val5.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            val4.planes.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.plane_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v560 = val5.position
            _x = _v560
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v561 = val5.orientation
            _x = _v561
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.plane_poses.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.subframe_names.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.subframe_poses = []
          for i in range(0, length):
            val5 = geometry_msgs.msg.Pose()
            _v562 = val5.position
            _x = _v562
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v563 = val5.orientation
            _x = _v563
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val4.subframe_poses.append(val5)
          start = end
          end += 1
          (val4.operation,) = _get_struct_b().unpack(str[start:end])
          _v549.collision_objects.append(val4)
        _v564 = _v549.octomap
        _v565 = _v564.header
        start = end
        end += 4
        (_v565.seq,) = _get_struct_I().unpack(str[start:end])
        _v566 = _v565.stamp
        _x = _v566
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v565.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v565.frame_id = str[start:end]
        _v567 = _v564.origin
        _v568 = _v567.position
        _x = _v568
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v569 = _v567.orientation
        _x = _v569
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v570 = _v564.octomap
        _v571 = _v570.header
        start = end
        end += 4
        (_v571.seq,) = _get_struct_I().unpack(str[start:end])
        _v572 = _v571.stamp
        _x = _v572
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v571.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v571.frame_id = str[start:end]
        start = end
        end += 1
        (_v570.binary,) = _get_struct_B().unpack(str[start:end])
        _v570.binary = bool(_v570.binary)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v570.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v570.id = str[start:end]
        start = end
        end += 8
        (_v570.resolution,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v570.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
        start = end
        end += 1
        (_v509.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v509.is_diff = bool(_v509.is_diff)
        self.solution.sub_trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class GetSolution(object):
  _type          = 'moveit_task_constructor_msgs/GetSolution'
  _md5sum = 'd480cf9886816bbe0b5ca79b54dc0a5d'
  _request_class  = GetSolutionRequest
  _response_class = GetSolutionResponse

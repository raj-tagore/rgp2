// Generated by gencpp from file moveit_task_constructor_msgs/SubSolution.msg
// DO NOT EDIT!


#ifndef MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_SUBSOLUTION_H
#define MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_SUBSOLUTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <moveit_task_constructor_msgs/SolutionInfo.h>

namespace moveit_task_constructor_msgs
{
template <class ContainerAllocator>
struct SubSolution_
{
  typedef SubSolution_<ContainerAllocator> Type;

  SubSolution_()
    : info()
    , sub_solution_id()  {
    }
  SubSolution_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , sub_solution_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::moveit_task_constructor_msgs::SolutionInfo_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _sub_solution_id_type;
  _sub_solution_id_type sub_solution_id;





  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> const> ConstPtr;

}; // struct SubSolution_

typedef ::moveit_task_constructor_msgs::SubSolution_<std::allocator<void> > SubSolution;

typedef boost::shared_ptr< ::moveit_task_constructor_msgs::SubSolution > SubSolutionPtr;
typedef boost::shared_ptr< ::moveit_task_constructor_msgs::SubSolution const> SubSolutionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.sub_solution_id == rhs.sub_solution_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_task_constructor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cad7989816e3b99e3abb2b6661af1df0";
  }

  static const char* value(const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcad7989816e3b99eULL;
  static const uint64_t static_value2 = 0x3abb2b6661af1df0ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_task_constructor_msgs/SubSolution";
  }

  static const char* value(const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# generic solution information\n"
"SolutionInfo info\n"
"\n"
"# IDs of subsolutions\n"
"uint32[] sub_solution_id\n"
"\n"
"================================================================================\n"
"MSG: moveit_task_constructor_msgs/SolutionInfo\n"
"# unique id within task\n"
"uint32 id\n"
"\n"
"# associated cost\n"
"float32 cost\n"
"\n"
"# associated comment, usually providing failure hint\n"
"string comment\n"
"\n"
"# id of stage that created this trajectory\n"
"uint32 stage_id\n"
"\n"
"# markers, e.g. providing additional hints or illustrating failure\n"
"visualization_msgs/Marker[] markers\n"
"\n"
"================================================================================\n"
"MSG: visualization_msgs/Marker\n"
"# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n"
"\n"
"uint8 ARROW=0\n"
"uint8 CUBE=1\n"
"uint8 SPHERE=2\n"
"uint8 CYLINDER=3\n"
"uint8 LINE_STRIP=4\n"
"uint8 LINE_LIST=5\n"
"uint8 CUBE_LIST=6\n"
"uint8 SPHERE_LIST=7\n"
"uint8 POINTS=8\n"
"uint8 TEXT_VIEW_FACING=9\n"
"uint8 MESH_RESOURCE=10\n"
"uint8 TRIANGLE_LIST=11\n"
"\n"
"uint8 ADD=0\n"
"uint8 MODIFY=0\n"
"uint8 DELETE=2\n"
"uint8 DELETEALL=3\n"
"\n"
"Header header                        # header for time/frame information\n"
"string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n"
"int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n"
"int32 type 		                       # Type of object\n"
"int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\n"
"geometry_msgs/Pose pose                 # Pose of the object\n"
"geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n"
"std_msgs/ColorRGBA color             # Color [0.0-1.0]\n"
"duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n"
"bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n"
"\n"
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n"
"geometry_msgs/Point[] points\n"
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n"
"#number of colors must either be 0 or equal to the number of points\n"
"#NOTE: alpha is not yet used\n"
"std_msgs/ColorRGBA[] colors\n"
"\n"
"# NOTE: only used for text markers\n"
"string text\n"
"\n"
"# NOTE: only used for MESH_RESOURCE markers\n"
"string mesh_resource\n"
"bool mesh_use_embedded_materials\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.sub_solution_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubSolution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_task_constructor_msgs::SubSolution_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::moveit_task_constructor_msgs::SolutionInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "sub_solution_id[]" << std::endl;
    for (size_t i = 0; i < v.sub_solution_id.size(); ++i)
    {
      s << indent << "  sub_solution_id[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.sub_solution_id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_SUBSOLUTION_H

// Generated by gencpp from file moveit_task_constructor_msgs/TrajectoryExecutionInfo.msg
// DO NOT EDIT!


#ifndef MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_TRAJECTORYEXECUTIONINFO_H
#define MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_TRAJECTORYEXECUTIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_task_constructor_msgs
{
template <class ContainerAllocator>
struct TrajectoryExecutionInfo_
{
  typedef TrajectoryExecutionInfo_<ContainerAllocator> Type;

  TrajectoryExecutionInfo_()
    : controller_names()  {
    }
  TrajectoryExecutionInfo_(const ContainerAllocator& _alloc)
    : controller_names(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _controller_names_type;
  _controller_names_type controller_names;





  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryExecutionInfo_

typedef ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<std::allocator<void> > TrajectoryExecutionInfo;

typedef boost::shared_ptr< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo > TrajectoryExecutionInfoPtr;
typedef boost::shared_ptr< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo const> TrajectoryExecutionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.controller_names == rhs.controller_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_task_constructor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1a83c75a8827f8b45cef6766d0a9ba3";
  }

  static const char* value(const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1a83c75a8827f8bULL;
  static const uint64_t static_value2 = 0x45cef6766d0a9ba3ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_task_constructor_msgs/TrajectoryExecutionInfo";
  }

  static const char* value(const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of controllers to use when executing the trajectory\n"
"string[] controller_names\n"
;
  }

  static const char* value(const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controller_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryExecutionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_task_constructor_msgs::TrajectoryExecutionInfo_<ContainerAllocator>& v)
  {
    s << indent << "controller_names[]" << std::endl;
    for (size_t i = 0; i < v.controller_names.size(); ++i)
    {
      s << indent << "  controller_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.controller_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_TRAJECTORYEXECUTIONINFO_H

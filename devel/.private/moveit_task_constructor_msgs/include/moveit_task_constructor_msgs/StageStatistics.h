// Generated by gencpp from file moveit_task_constructor_msgs/StageStatistics.msg
// DO NOT EDIT!


#ifndef MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGESTATISTICS_H
#define MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGESTATISTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_task_constructor_msgs
{
template <class ContainerAllocator>
struct StageStatistics_
{
  typedef StageStatistics_<ContainerAllocator> Type;

  StageStatistics_()
    : id(0)
    , solved()
    , failed()
    , num_failed(0)
    , total_compute_time(0.0)  {
    }
  StageStatistics_(const ContainerAllocator& _alloc)
    : id(0)
    , solved(_alloc)
    , failed(_alloc)
    , num_failed(0)
    , total_compute_time(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _solved_type;
  _solved_type solved;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _failed_type;
  _failed_type failed;

   typedef uint32_t _num_failed_type;
  _num_failed_type num_failed;

   typedef double _total_compute_time_type;
  _total_compute_time_type total_compute_time;





  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> const> ConstPtr;

}; // struct StageStatistics_

typedef ::moveit_task_constructor_msgs::StageStatistics_<std::allocator<void> > StageStatistics;

typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageStatistics > StageStatisticsPtr;
typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageStatistics const> StageStatisticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.solved == rhs.solved &&
    lhs.failed == rhs.failed &&
    lhs.num_failed == rhs.num_failed &&
    lhs.total_compute_time == rhs.total_compute_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_task_constructor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3065cf7e54eaf169fb84102f63f1ac2";
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3065cf7e54eaf16ULL;
  static const uint64_t static_value2 = 0x9fb84102f63f1ac2ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_task_constructor_msgs/StageStatistics";
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# dynamically changing information for a stage\n"
"\n"
"# unique id within task\n"
"uint32 id\n"
"\n"
"# successful solution IDs of this stage, sorted by increasing cost\n"
"uint32[] solved\n"
"\n"
"# (optional) failed solution IDs of this stage\n"
"uint32[] failed\n"
"# number of failed solutions (if failed is empty)\n"
"uint32   num_failed\n"
"# total computation time in seconds\n"
"float64 total_compute_time\n"
;
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.solved);
      stream.next(m.failed);
      stream.next(m.num_failed);
      stream.next(m.total_compute_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StageStatistics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_task_constructor_msgs::StageStatistics_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "solved[]" << std::endl;
    for (size_t i = 0; i < v.solved.size(); ++i)
    {
      s << indent << "  solved[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.solved[i]);
    }
    s << indent << "failed[]" << std::endl;
    for (size_t i = 0; i < v.failed.size(); ++i)
    {
      s << indent << "  failed[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.failed[i]);
    }
    s << indent << "num_failed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_failed);
    s << indent << "total_compute_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_compute_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGESTATISTICS_H

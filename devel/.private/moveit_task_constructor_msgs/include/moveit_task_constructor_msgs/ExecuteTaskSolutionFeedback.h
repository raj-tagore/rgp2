// Generated by gencpp from file moveit_task_constructor_msgs/ExecuteTaskSolutionFeedback.msg
// DO NOT EDIT!


#ifndef MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_EXECUTETASKSOLUTIONFEEDBACK_H
#define MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_EXECUTETASKSOLUTIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_task_constructor_msgs
{
template <class ContainerAllocator>
struct ExecuteTaskSolutionFeedback_
{
  typedef ExecuteTaskSolutionFeedback_<ContainerAllocator> Type;

  ExecuteTaskSolutionFeedback_()
    : sub_id(0)
    , sub_no(0)  {
    }
  ExecuteTaskSolutionFeedback_(const ContainerAllocator& _alloc)
    : sub_id(0)
    , sub_no(0)  {
  (void)_alloc;
    }



   typedef uint32_t _sub_id_type;
  _sub_id_type sub_id;

   typedef uint32_t _sub_no_type;
  _sub_no_type sub_no;





  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteTaskSolutionFeedback_

typedef ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<std::allocator<void> > ExecuteTaskSolutionFeedback;

typedef boost::shared_ptr< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback > ExecuteTaskSolutionFeedbackPtr;
typedef boost::shared_ptr< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback const> ExecuteTaskSolutionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.sub_id == rhs.sub_id &&
    lhs.sub_no == rhs.sub_no;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_task_constructor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b60fd9ace7afa0cb3eb2c409d0732ed";
  }

  static const char* value(const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b60fd9ace7afa0cULL;
  static const uint64_t static_value2 = 0xb3eb2c409d0732edULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_task_constructor_msgs/ExecuteTaskSolutionFeedback";
  }

  static const char* value(const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# finished subtrajectory id / number\n"
"uint32 sub_id\n"
"uint32 sub_no\n"
"\n"
;
  }

  static const char* value(const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sub_id);
      stream.next(m.sub_no);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteTaskSolutionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_task_constructor_msgs::ExecuteTaskSolutionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "sub_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sub_id);
    s << indent << "sub_no: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sub_no);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_EXECUTETASKSOLUTIONFEEDBACK_H

// Generated by gencpp from file moveit_task_constructor_msgs/StageDescription.msg
// DO NOT EDIT!


#ifndef MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGEDESCRIPTION_H
#define MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGEDESCRIPTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <moveit_task_constructor_msgs/Property.h>

namespace moveit_task_constructor_msgs
{
template <class ContainerAllocator>
struct StageDescription_
{
  typedef StageDescription_<ContainerAllocator> Type;

  StageDescription_()
    : id(0)
    , parent_id(0)
    , name()
    , flags(0)
    , properties()  {
    }
  StageDescription_(const ContainerAllocator& _alloc)
    : id(0)
    , parent_id(0)
    , name(_alloc)
    , flags(0)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _parent_id_type;
  _parent_id_type parent_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef std::vector< ::moveit_task_constructor_msgs::Property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::moveit_task_constructor_msgs::Property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;





  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> const> ConstPtr;

}; // struct StageDescription_

typedef ::moveit_task_constructor_msgs::StageDescription_<std::allocator<void> > StageDescription;

typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageDescription > StageDescriptionPtr;
typedef boost::shared_ptr< ::moveit_task_constructor_msgs::StageDescription const> StageDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.parent_id == rhs.parent_id &&
    lhs.name == rhs.name &&
    lhs.flags == rhs.flags &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator1> & lhs, const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_task_constructor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eae8b915a082df4d70b7bbf2530bd3fd";
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeae8b915a082df4dULL;
  static const uint64_t static_value2 = 0x70b7bbf2530bd3fdULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_task_constructor_msgs/StageDescription";
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# static description of a stage\n"
"\n"
"# unique id within task\n"
"uint32 id\n"
"\n"
"# parent id, parent_id == id means root\n"
"uint32 parent_id\n"
"\n"
"# name of this stage\n"
"string name\n"
"\n"
"# flags: interface, ...\n"
"uint32 flags\n"
"\n"
"# properties\n"
"Property[] properties\n"
"\n"
"================================================================================\n"
"MSG: moveit_task_constructor_msgs/Property\n"
"string name\n"
"string description\n"
"string type\n"
"string value\n"
;
  }

  static const char* value(const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.parent_id);
      stream.next(m.name);
      stream.next(m.flags);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StageDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_task_constructor_msgs::StageDescription_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "parent_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.parent_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_task_constructor_msgs::Property_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_TASK_CONSTRUCTOR_MSGS_MESSAGE_STAGEDESCRIPTION_H

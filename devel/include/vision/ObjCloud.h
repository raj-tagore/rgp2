// Generated by gencpp from file vision/ObjCloud.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_OBJCLOUD_H
#define VISION_MESSAGE_OBJCLOUD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct ObjCloud_
{
  typedef ObjCloud_<ContainerAllocator> Type;

  ObjCloud_()
    : name()
    , size()
    , points()  {
    }
  ObjCloud_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , size(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _size_type;
  _size_type size;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::vision::ObjCloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::ObjCloud_<ContainerAllocator> const> ConstPtr;

}; // struct ObjCloud_

typedef ::vision::ObjCloud_<std::allocator<void> > ObjCloud;

typedef boost::shared_ptr< ::vision::ObjCloud > ObjCloudPtr;
typedef boost::shared_ptr< ::vision::ObjCloud const> ObjCloudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::ObjCloud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::ObjCloud_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::ObjCloud_<ContainerAllocator1> & lhs, const ::vision::ObjCloud_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.size == rhs.size &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::ObjCloud_<ContainerAllocator1> & lhs, const ::vision::ObjCloud_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision::ObjCloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::ObjCloud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::ObjCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::ObjCloud_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::ObjCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::ObjCloud_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::ObjCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48039639e73b60b58ebc7de8fa9cef21";
  }

  static const char* value(const ::vision::ObjCloud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48039639e73b60b5ULL;
  static const uint64_t static_value2 = 0x8ebc7de8fa9cef21ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::ObjCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/ObjCloud";
  }

  static const char* value(const ::vision::ObjCloud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::ObjCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32[] size\n"
"float32[] points\n"
;
  }

  static const char* value(const ::vision::ObjCloud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::ObjCloud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.size);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjCloud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::ObjCloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::ObjCloud_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "size[]" << std::endl;
    for (size_t i = 0; i < v.size.size(); ++i)
    {
      s << indent << "  size[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.size[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_OBJCLOUD_H
